#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞ 3.0
–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã
"""

import logging
import sys
from database import db
from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    
    tables = [
        """
        CREATE TABLE IF NOT EXISTS athletes (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE NOT NULL,
            username VARCHAR(100),
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            gender VARCHAR(10),
            age INTEGER,
            weight DECIMAL(5,2),
            height DECIMAL(5,2),
            sport_type VARCHAR(100),
            training_frequency VARCHAR(50),
            training_duration VARCHAR(50),
            training_intensity VARCHAR(50),
            goal TEXT,
            competition_date DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS meal_plans (
            id SERIAL PRIMARY KEY,
            athlete_id INTEGER REFERENCES athletes(id) ON DELETE CASCADE,
            plan_type VARCHAR(50) DEFAULT 'custom',
            duration_days INTEGER DEFAULT 7,
            total_calories DECIMAL(8,2),
            protein_grams DECIMAL(8,2),
            carbs_grams DECIMAL(8,2),
            fat_grams DECIMAL(8,2),
            plan_data JSONB NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS meals (
            id SERIAL PRIMARY KEY,
            athlete_id INTEGER REFERENCES athletes(id) ON DELETE CASCADE,
            meal_type VARCHAR(50) NOT NULL,
            food_items JSONB NOT NULL,
            calories DECIMAL(8,2),
            protein_grams DECIMAL(8,2),
            carbs_grams DECIMAL(8,2),
            fat_grams DECIMAL(8,2),
            meal_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS activities (
            id SERIAL PRIMARY KEY,
            athlete_id INTEGER REFERENCES athletes(id) ON DELETE CASCADE,
            activity_type VARCHAR(50) NOT NULL,
            activity_data JSONB NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """,
        
        """
        CREATE TABLE IF NOT EXISTS workouts (
            id SERIAL PRIMARY KEY,
            athlete_id INTEGER REFERENCES athletes(id) ON DELETE CASCADE,
            workout_type VARCHAR(100) NOT NULL,
            duration_minutes INTEGER,
            intensity VARCHAR(50),
            calories_burned DECIMAL(8,2),
            workout_data JSONB NOT NULL,
            workout_date DATE DEFAULT CURRENT_DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
    ]
    
    indexes = [
        "CREATE INDEX IF NOT EXISTS idx_athletes_telegram_id ON athletes(telegram_id)",
        "CREATE INDEX IF NOT EXISTS idx_meal_plans_athlete_id ON meal_plans(athlete_id)",
        "CREATE INDEX IF NOT EXISTS idx_meal_plans_created_at ON meal_plans(created_at)",
        "CREATE INDEX IF NOT EXISTS idx_meals_athlete_id ON meals(athlete_id)",
        "CREATE INDEX IF NOT EXISTS idx_meals_meal_time ON meals(meal_time)",
        "CREATE INDEX IF NOT EXISTS idx_activities_athlete_id ON activities(athlete_id)",
        "CREATE INDEX IF NOT EXISTS idx_activities_created_at ON activities(created_at)",
        "CREATE INDEX IF NOT EXISTS idx_workouts_athlete_id ON workouts(athlete_id)",
        "CREATE INDEX IF NOT EXISTS idx_workouts_workout_date ON workouts(workout_date)"
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for table_sql in tables:
            db.execute_query(table_sql)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        for index_sql in indexes:
            db.execute_query(index_sql)
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω")
            
        logger.info("üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    if not config.DEBUG:
        logger.info("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ DEBUG")
        return
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user = {
            'telegram_id': 123456789,
            'username': 'test_user',
            'first_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
            'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'gender': 'male',
            'age': 25,
            'weight': 75.5,
            'height': 180.0,
            'sport_type': '–±–µ–≥',
            'goal': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Ä–∞—Ñ–æ–Ω—É'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.get_user(test_user['telegram_id'])
        if not existing_user:
            user_id = db.create_user(test_user)
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}")
        else:
            logger.info("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.connect()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if create_tables():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ)
            if config.DEBUG:
                create_test_data()
            
            logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        db.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()