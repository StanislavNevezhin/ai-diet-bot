"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞ AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–≥–ª–∞—Å–Ω–æ Sequence Diagram
"""

import logging
import json
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from typing import Dict, List, Optional, Tuple

from config import config
from database import db
from llm_integration import llm

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
MAIN_MENU, COLLECTING_PARAMS, TRAINING_INTERVIEW, ACTIVITY_INTERVIEW, VIEWING_PLAN, VIEWING_SAVED_PLANS = range(6)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
user_interview_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    existing_user = db.get_user(user.id)
    
    if existing_user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º?"
        await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard())
        return MAIN_MENU
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - AI –¥–∏–µ—Ç–æ–ª–æ–≥ 3.0, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ "
            "–∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! ü•á\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ:"
        )
        await update.message.reply_text(welcome_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        await update.message.reply_text("üöÄ –ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–µ–≥, –ø–ª–∞–≤–∞–Ω–∏–µ, —Ñ—É—Ç–±–æ–ª)")
        return COLLECTING_PARAMS

async def collect_parameters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_data = context.user_data.setdefault('user_data', {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–±–∏—Ä–∞–µ–º
    current_step = user_data.get('current_step', 'sport_type')
    
    if current_step == 'sport_type':
        user_data['sport_type'] = update.message.text
        user_data['current_step'] = 'gender'
        await update.message.reply_text("üë´ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):")
        
    elif current_step == 'gender':
        gender = update.message.text.lower()
        if gender in ['–º—É–∂—Å–∫–æ–π', '–º—É–∂', 'm']:
            user_data['gender'] = 'male'
        elif gender in ['–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', 'f']:
            user_data['gender'] = 'female'
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ '–º—É–∂—Å–∫–æ–π' –∏–ª–∏ '–∂–µ–Ω—Å–∫–∏–π':")
            return COLLECTING_PARAMS
        
        user_data['current_step'] = 'age'
        await update.message.reply_text("üéÇ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        
    elif current_step == 'age':
        try:
            age = int(update.message.text)
            if 10 <= age <= 100:
                user_data['age'] = age
                user_data['current_step'] = 'weight'
                await update.message.reply_text("‚öñÔ∏è –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 100 –ª–µ—Ç:")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º:")
            
    elif current_step == 'weight':
        try:
            weight = float(update.message.text.replace(',', '.'))
            if 30 <= weight <= 200:
                user_data['weight'] = weight
                user_data['current_step'] = 'height'
                await update.message.reply_text("üìè –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å –æ—Ç 30 –¥–æ 200 –∫–≥:")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5):")
            
    elif current_step == 'height':
        try:
            height = float(update.message.text)
            if 100 <= height <= 250:
                user_data['height'] = height
                user_data['current_step'] = 'goal'
                await update.message.reply_text(
                    "üéØ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?\n"
                    "‚Ä¢ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã üí™\n"
                    "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ üèÉ‚Äç‚ôÇÔ∏è\n"
                    "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã ‚öñÔ∏è\n"
                    "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º üèÜ"
                )
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º:")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º:")
            
    elif current_step == 'goal':
        user_data['goal'] = update.message.text
        user_data['current_step'] = 'competition_date'
        await update.message.reply_text(
            "üìÖ –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –≤–∞–∂–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è? –ï—Å–ª–∏ –¥–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì), "
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –Ω–µ—Ç:"
        )
        
    elif current_step == 'competition_date':
        text = update.message.text.lower()
        if text == '–Ω–µ—Ç':
            user_data['competition_date'] = None
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            return await finish_parameter_collection(update, context, user_data)
        else:
            try:
                comp_date = datetime.strptime(text, '%d.%m.%Y').date()
                if db.validate_competition_date(comp_date):
                    user_data['competition_date'] = comp_date
                    return await finish_parameter_collection(update, context, user_data)
                else:
                    await update.message.reply_text("–î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '–Ω–µ—Ç':")
    
    return COLLECTING_PARAMS

async def finish_parameter_collection(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: Dict) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_data['telegram_id'] = user.id
    user_data['username'] = user.username
    user_data['first_name'] = user.first_name
    user_data['last_name'] = user.last_name
    
    try:
        user_id = db.create_user(user_data)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É —Å ID {user_id}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('user_data', None)
        
        await update.message.reply_text(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è!",
            reply_markup=main_menu_keyboard()
        )
        
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start"
        )
        return ConversationHandler.END

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    choice = query.data
    
    if choice == 'generate_plan':
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
        await query.edit_message_text(
            "üîç –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –æ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üèãÔ∏è‚Äç‚ôÇÔ∏è", callback_data="start_interview")]
            ])
        )
        
    elif choice == 'start_interview':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
        user_data = db.get_user(user.id)
        if not user_data:
            await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏ /start")
            return ConversationHandler.END
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é
        questions = await llm.generate_interview_questions(user_data, 'training')
        if questions:
            user_interview_data[user.id] = {
                'training': {'questions': questions, 'current_question': 0, 'answers': {}},
                'activity': {'questions': [], 'current_question': 0, 'answers': {}}
            }
            
            await ask_next_question(query, user.id, 'training')
            return TRAINING_INTERVIEW
        else:
            await query.edit_message_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return MAIN_MENU
            
    elif choice == 'view_saved_plans':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã
        plans = db.get_user_plans(user.id)
        if plans:
            keyboard = []
            for plan in plans[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞–Ω–æ–≤
                plan_date = plan['created_at'].strftime('%d.%m.%Y')
                keyboard.append([
                    InlineKeyboardButton(
                        f"–ü–ª–∞–Ω –æ—Ç {plan_date} ({plan['plan_type']})", 
                        callback_data=f"view_plan_{plan['id']}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
            
            await query.edit_message_text(
                "üìã –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return VIEWING_SAVED_PLANS
        else:
            await query.edit_message_text(
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )
            return MAIN_MENU
            
    elif choice == 'cancel':
        return await cancel(update, context)
    
    return MAIN_MENU

async def handle_training_interview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"""
    user = update.effective_user
    answer = update.message.text
    
    if user.id not in user_interview_data:
        await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    interview_data = user_interview_data[user.id]['training']
    current_q = interview_data['current_question']
    interview_data['answers'][f"q{current_q + 1}"] = answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    interview_data['current_question'] += 1
    
    if interview_data['current_question'] < len(interview_data['questions']):
        await ask_next_question_from_message(update, user.id, 'training')
        return TRAINING_INTERVIEW
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–≤–æ–µ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é üö∂‚Äç‚ôÇÔ∏è", callback_data="continue_activity_interview")]
            ])
        )
        return MAIN_MENU

async def handle_activity_interview(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–≤—å—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user = update.effective_user
    answer = update.message.text
    
    if user.id not in user_interview_data:
        await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–µ—Ä–≤–∞–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    interview_data = user_interview_data[user.id]['activity']
    current_q = interview_data['current_question']
    interview_data['answers'][f"q{current_q + 1}"] = answer
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    interview_data['current_question'] += 1
    
    if interview_data['current_question'] < len(interview_data['questions']):
        await ask_next_question_from_message(update, user.id, 'activity')
        return ACTIVITY_INTERVIEW
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        return await generate_meal_plan(update, context, user.id)

async def generate_meal_plan(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> int:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
    try:
        user_data = db.get_user(user_id)
        interview_data = user_interview_data.get(user_id, {})
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
        meal_plan = await llm.generate_meal_plan(user_data, interview_data)
        
        if meal_plan:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É
            plan_id = db.save_meal_plan(user_id, meal_plan)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            db.save_activity(user_id, 'interview_completed', interview_data)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_interview_data.pop(user_id, None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –ø–ª–∞–Ω–∞
            if isinstance(update, Update) and update.message:
                await update.message.reply_text(
                    "üéâ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ–≥–æ –ø–æ –¥–Ω—è–º –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                    reply_markup=view_plan_keyboard(plan_id, 1)
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ callback query
                query = update.callback_query
                await query.edit_message_text(
                    "üéâ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –≥–æ—Ç–æ–≤!\n\n"
                    "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –µ–≥–æ –ø–æ –¥–Ω—è–º –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                    reply_markup=view_plan_keyboard(plan_id, 1)
                )
            
            return VIEWING_PLAN
            
        else:
            error_msg = "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            if isinstance(update, Update) and update.message:
                await update.message.reply_text(error_msg, reply_markup=main_menu_keyboard())
            else:
                query = update.callback_query
                await query.edit_message_text(error_msg, reply_markup=main_menu_keyboard())
            return MAIN_MENU
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {e}")
        error_msg = "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        if isinstance(update, Update) and update.message:
            await update.message.reply_text(error_msg, reply_markup=main_menu_keyboard())
        else:
            query = update.callback_query
            await query.edit_message_text(error_msg, reply_markup=main_menu_keyboard())
        return MAIN_MENU

async def view_plan_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏ –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ callback_data
    callback_data = query.data
    if callback_data.startswith('day_'):
        parts = callback_data.split('_')
        if len(parts) >= 3:
            plan_id = int(parts[1])
            day_number = int(parts[2])
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –ø–ª–∞–Ω–∞
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è
            await query.edit_message_text(
                f"üìã –î–µ–Ω—å {day_number} —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è\n\n"
                "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å...",
                reply_markup=view_plan_keyboard(plan_id, day_number)
            )
    
    return VIEWING_PLAN

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user = update.effective_user
    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    user_interview_data.pop(user.id, None)
    
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - –Ω–∞–ø–∏—à–∏ /start",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler