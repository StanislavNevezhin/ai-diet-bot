"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞ AI –¥–∏–µ—Ç–æ–ª–æ–≥–∞
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from typing import List, Dict, Optional
from datetime import datetime, date
import re

def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üçΩ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", callback_data="generate_plan")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ø–ª–∞–Ω—ã", callback_data="view_saved_plans")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def view_plan_keyboard(plan_id: int, current_day: int, total_days: int = 7) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if current_day > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"day_{plan_id}_{current_day-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"–î–µ–Ω—å {current_day}", callback_data=f"day_info_{current_day}"))
    
    if current_day < total_days:
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂Ô∏è", callback_data=f"day_{plan_id}_{current_day+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"save_plan_{plan_id}")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{plan_id}")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def format_meal_plan_day(plan_data: Dict, day_number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if 'days' not in plan_data or day_number < 1 or day_number > len(plan_data['days']):
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    day_info = plan_data['days'][day_number - 1]
    response = f"üìã *–î–µ–Ω—å {day_number}* ‚Ä¢ {day_info.get('date', '')}\n\n"
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if day_info.get('training_schedule'):
        response += f"üèãÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:* {day_info['training_schedule']}\n\n"
    
    # –ü—Ä–∏–µ–º—ã –ø–∏—â–∏
    response += "üçΩ *–ü–∏—Ç–∞–Ω–∏–µ:*\n"
    for meal in day_info.get('meals', []):
        response += f"\n*{meal['meal_type'].capitalize()}* ({meal['time']})\n"
        
        for item in meal.get('food_items', []):
            response += f"‚Ä¢ {item['name']} - {item['portion']}\n"
            
            # –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
            nutrients = []
            if item.get('calories'):
                nutrients.append(f"{item['calories']} –∫–∫–∞–ª")
            if item.get('protein'):
                nutrients.append(f"–ë: {item['protein']}–≥")
            if item.get('carbs'):
                nutrients.append(f"–£: {item['carbs']}–≥")
            if item.get('fat'):
                nutrients.append(f"–ñ: {item['fat']}–≥")
                
            if nutrients:
                response += f"  ({', '.join(nutrients)})\n"
        
        # –ò—Ç–æ–≥–∏ –ø–æ –ø—Ä–∏–µ–º—É –ø–∏—â–∏
        if meal.get('total_calories'):
            response += f"\n*–ò—Ç–æ–≥–æ:* {meal['total_calories']} –∫–∫–∞–ª"
            if meal.get('total_protein'):
                response += f" (–ë: {meal['total_protein']}–≥"
            if meal.get('total_carbs'):
                response += f", –£: {meal['total_carbs']}–≥"
            if meal.get('total_fat'):
                response += f", –ñ: {meal['total_fat']}–≥"
            response += ")\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if meal.get('recommendations'):
            response += f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:* {meal['recommendations']}\n"
    
    # –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è
    if day_info.get('hydration'):
        response += f"\nüíß *–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è:* {day_info['hydration']}\n"
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–Ω—è
    if day_info.get('general_recommendations'):
        response += f"\nüåü *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:* {day_info['general_recommendations']}\n"
    
    return response

def format_plan_stats(plan_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    response = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∞:*\n\n"
    
    if plan_data.get('total_calories'):
        response += f"‚Ä¢ *–ö–∞–ª–æ—Ä–∏–∏:* {plan_data['total_calories']} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
    if plan_data.get('protein_grams'):
        response += f"‚Ä¢ *–ë–µ–ª–∫–∏:* {plan_data['protein_grams']} –≥/–¥–µ–Ω—å\n"
    if plan_data.get('carbs_grams'):
        response += f"‚Ä¢ *–£–≥–ª–µ–≤–æ–¥—ã:* {plan_data['carbs_grams']} –≥/–¥–µ–Ω—å\n"
    if plan_data.get('fat_grams'):
        response += f"‚Ä¢ *–ñ–∏—Ä—ã:* {plan_data['fat_grams']} –≥/–¥–µ–Ω—å\n"
    
    # –†–∞—Å—á–µ—Ç –º–∞–∫—Ä–æ—Å–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    if all([plan_data.get('protein_grams'), plan_data.get('carbs_grams'), plan_data.get('fat_grams')]):
        total_grams = plan_data['protein_grams'] + plan_data['carbs_grams'] + plan_data['fat_grams']
        if total_grams > 0:
            protein_pct = (plan_data['protein_grams'] * 4 / (plan_data['protein_grams'] * 4 + plan_data['carbs_grams'] * 4 + plan_data['fat_grams'] * 9)) * 100
            carbs_pct = (plan_data['carbs_grams'] * 4 / (plan_data['protein_grams'] * 4 + plan_data['carbs_grams'] * 4 + plan_data['fat_grams'] * 9)) * 100
            fat_pct = (plan_data['fat_grams'] * 9 / (plan_data['protein_grams'] * 4 + plan_data['carbs_grams'] * 4 + plan_data['fat_grams'] * 9)) * 100
            
            response += f"\n*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Ä–æ—Å–æ–≤:*\n"
            response += f"‚Ä¢ –ë–µ–ª–∫–∏: {protein_pct:.1f}%\n"
            response += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs_pct:.1f}%\n"
            response += f"‚Ä¢ –ñ–∏—Ä—ã: {fat_pct:.1f}%\n"
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if plan_data.get('general_recommendations'):
        response += f"\nüåü *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n{plan_data['general_recommendations']}\n"
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    if plan_data.get('shopping_list'):
        response += f"\nüõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*\n"
        for i, item in enumerate(plan_data['shopping_list'][:10], 1):  # –ü–µ—Ä–≤—ã–µ 10 items
            response += f"{i}. {item}\n"
        if len(plan_data['shopping_list']) > 10:
            response += f"... –∏ –µ—â–µ {len(plan_data['shopping_list']) - 10} –ø–æ–∑–∏—Ü–∏–π\n"
    
    return response

def validate_date(date_str: str) -> Optional[date]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        return datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        return None

def validate_number(input_str: str, min_val: float = None, max_val: float = None) -> Optional[float]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        num = float(input_str.replace(',', '.'))
        if min_val is not None and num < min_val:
            return None
        if max_val is not None and num > max_val:
            return None
        return num
    except ValueError:
        return None

def validate_gender(gender_str: str) -> Optional[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª–∞"""
    gender = gender_str.lower()
    if gender in ['–º—É–∂—Å–∫–æ–π', '–º—É–∂', 'm', 'male']:
        return 'male'
    elif gender in ['–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', 'f', 'female']:
        return 'female'
    return None

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ Markdown –¥–ª—è Telegram"""
    if not text:
        return text
        
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

def format_user_profile(user_data: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile = "üë§ *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
    
    if user_data.get('first_name'):
        profile += f"‚Ä¢ *–ò–º—è:* {escape_markdown(user_data['first_name'])}\n"
    if user_data.get('age'):
        profile += f"‚Ä¢ *–í–æ–∑—Ä–∞—Å—Ç:* {user_data['age']} –ª–µ—Ç\n"
    if user_data.get('gender'):
        gender = "–ú—É–∂—Å–∫–æ–π" if user_data['gender'] == 'male' else "–ñ–µ–Ω—Å–∫–∏–π"
        profile += f"‚Ä¢ *–ü–æ–ª:* {gender}\n"
    if user_data.get('weight'):
        profile += f"‚Ä¢ *–í–µ—Å:* {user_data['weight']} –∫–≥\n"
    if user_data.get('height'):
        profile += f"‚Ä¢ *–†–æ—Å—Ç:* {user_data['height']} —Å–º\n"
    if user_data.get('sport_type'):
        profile += f"‚Ä¢ *–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:* {escape_markdown(user_data['sport_type'])}\n"
    if user_data.get('goal'):
        profile += f"‚Ä¢ *–¶–µ–ª—å:* {escape_markdown(user_data['goal'])}\n"
    if user_data.get('competition_date'):
        profile += f"‚Ä¢ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:* {user_data['competition_date'].strftime('%d.%m.%Y')}\n"
    
    profile += f"\nüìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:* {user_data.get('created_at', datetime.now()).strftime('%d.%m.%Y')}"
    
    return profile